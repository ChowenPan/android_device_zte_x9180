From 5ea1ed471cb0b694707188cf02cf8c7284154825 Mon Sep 17 00:00:00 2001
From: proDOOMman <prodoomman@gmail.com>
Date: Sat, 4 Apr 2015 18:46:41 +0300
Subject: [PATCH] Add the ability to hide exclamation marks from signal
 strength

Change-Id: Ia0e0fd4fe6c279243e49e4d300a6703f9c8f8ac5
---
 .../policy/MSimNetworkControllerImpl.java          | 57 ++++++++++++++++++++--
 1 file changed, 53 insertions(+), 4 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/MSimNetworkControllerImpl.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/MSimNetworkControllerImpl.java
index aea81b5..01ee77e 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/MSimNetworkControllerImpl.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/MSimNetworkControllerImpl.java
@@ -30,6 +30,7 @@ import android.content.Intent;
 import android.content.IntentFilter;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
+import android.net.Uri;
 import android.net.wifi.WifiManager;
 import android.net.wimax.WimaxManagerConstants;
 import android.os.Binder;
@@ -68,6 +69,9 @@ public class MSimNetworkControllerImpl extends NetworkControllerImpl {
     static final boolean DEBUG = false;
     static final boolean CHATTY = true; // additional diagnostics, but not logspew
 
+    private boolean mShowExclamationMarks = true;
+    private ExSettingsObserver mSettingsObserver;
+
     // telephony
     boolean[] mMSimDataConnected;
     IccCardConstants.State[] mMSimState;
@@ -251,6 +255,9 @@ public class MSimNetworkControllerImpl extends NetworkControllerImpl {
         mLastCombinedSignalIconId = mMSimLastCombinedSignalIconId[mDefaultPhoneId];
         mLastDataTypeIconId = mMSimLastDataTypeIconId[mDefaultPhoneId];
         mLastSimIconId = mMSimLastSimIconId[mDefaultPhoneId];
+
+        mSettingsObserver = new ExSettingsObserver(new Handler());
+        mSettingsObserver.register();
     }

     @Override
@@ -795,7 +802,7 @@ public class MSimNetworkControllerImpl extends NetworkControllerImpl {
                 }
 
                 mMSimPhoneSignalIconId[phoneId] =
-                        TelephonyIcons.getSignalStrengthIcon(phoneId, mInetCondition,
+                        TelephonyIcons.getSignalStrengthIcon(phoneId, mShowExclamationMarks?mInetCondition:1,
                         iconLevel, isRoaming(phoneId));
 
                 mMSimContentDescriptionPhoneSignal[phoneId] =
@@ -805,7 +812,7 @@ public class MSimNetworkControllerImpl extends NetworkControllerImpl {
 
                 if (phoneId == dataSub) {
                     mQSPhoneSignalIconId = TelephonyIcons
-                            .QS_TELEPHONY_SIGNAL_STRENGTH[mInetCondition][iconLevel];
+                            .QS_TELEPHONY_SIGNAL_STRENGTH[mShowExclamationMarks?mInetCondition:1][iconLevel];
                 }
 
                 if (DEBUG) {
@@ -838,7 +845,7 @@ public class MSimNetworkControllerImpl extends NetworkControllerImpl {
             if (mIsWimaxEnabled && mWimaxConnected) {
                 // wimax is a special 4g network not handled by telephony
                 mMSimDataTypeIconId[phoneId] = R.drawable.stat_sys_data_fully_connected_4g;
-                mQSDataTypeIconId = TelephonyIcons.QS_DATA_4G[mInetCondition];
+                mQSDataTypeIconId = TelephonyIcons.QS_DATA_4G[mShowExclamationMarks?mInetCondition:1];
                 mMSimContentDescriptionDataType[phoneId] = mContext.getString(
                         R.string.accessibility_data_connection_4g);
             } else {
@@ -877,7 +884,7 @@ public class MSimNetworkControllerImpl extends NetworkControllerImpl {
         }
 
         if (setQSDataTypeIcon && phoneId == dataSub) {
-            mQSDataTypeIconId = TelephonyIcons.QS_DATA_R[mInetCondition];
+            mQSDataTypeIconId = TelephonyIcons.QS_DATA_R[mShowExclamationMarks?mInetCondition:1];
          }
     }
 
@@ -1554,4 +1561,46 @@ public class MSimNetworkControllerImpl extends NetworkControllerImpl {
         pw.print(mLastCombinedLabel);
         pw.println("");
     }
+
+    private final class ExSettingsObserver extends ContentObserver {
+        private final ContentResolver mResolver;
+        private boolean mRegistered;
+        private final Uri EXCLAMATION_MARKS_URI = Settings.System.getUriFor(
+                "statusbar_exclamation_marks");
+
+        public ExSettingsObserver(Handler handler) {
+            super(handler);
+            mResolver = mContext.getContentResolver();
+        }
+
+        public boolean showExclamationMarks() {
+            return Settings.System.getIntForUser(mResolver,
+                    "statusbar_exclamation_marks", 1, UserHandle.USER_CURRENT) != 0;
+        }
+
+        public void register() {
+            if (mRegistered) {
+                mResolver.unregisterContentObserver(this);
+            }
+            mResolver.registerContentObserver(EXCLAMATION_MARKS_URI, false, this, UserHandle.USER_CURRENT);
+            updateSettings();
+        }
+
+        @Override
+        public void onChange(boolean selfChange, Uri uri) {
+            if(EXCLAMATION_MARKS_URI.equals(uri)) {
+                updateSettings();
+            }
+        }
+
+        private void updateSettings() {
+            mShowExclamationMarks = showExclamationMarks();
+            for (int i = 0; i < mPhoneCount; i++) {
+                updateTelephonySignalStrength(i);
+                updateDataNetType(i);
+                updateDataIcon(i);
+                refreshViews(i);
+            }
+        }
+    }
 }
-- 
1.9.1

